import streamlit as st
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np
import os
from fpdf import FPDF
from datetime import datetime

# Load model
model = load_model("Skin_Cancer_main.keras")

# Prediction function
def predict(img):
    img = image.load_img(img, target_size=(150, 150))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)
    pred = model.predict(img_array)[0][0]
    return "Malignant" if pred > 0.5 else "Benign", pred

# PDF generator
def create_pdf(name, age, address, result, prob):
    pdf = FPDF()
    pdf.add_page()
    
    # Title
    pdf.set_font("Arial", 'B', 16)
    pdf.cell(200, 10, txt="Skin Cancer Diagnostic Report", ln=True, align="C")
    
    # Subtitle
    pdf.set_font("Arial", '', 12)
    pdf.cell(200, 10, txt="Generated by AI Diagnostic System", ln=True, align="C")
    pdf.ln(5)
    
    # Horizontal line
    pdf.set_draw_color(0, 0, 0)
    pdf.set_line_width(0.5)
    pdf.line(10, 35, 200, 35)
    pdf.ln(10)

    # Date
    today = datetime.now().strftime('%B %d, %Y')
    pdf.set_font("Arial", '', 12)
    pdf.cell(200, 10, txt=f"Date: {today}", ln=True)

    # Patient Info
    pdf.ln(5)
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(200, 10, txt="Patient Information:", ln=True)

    pdf.set_font("Arial", '', 12)
    pdf.cell(200, 10, txt=f"Name: {name}", ln=True)
    pdf.cell(200, 10, txt=f"Age: {age}", ln=True)
    pdf.cell(200, 10, txt=f"Address: {address}", ln=True)

    # Diagnosis
    pdf.ln(5)
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(200, 10, txt="Diagnosis Result:", ln=True)
    pdf.set_font("Arial", '', 12)
    pdf.cell(200, 10, txt=f"Prediction: {result} (Confidence: {prob:.2f})", ln=True)

    # Remedies if malignant
    if result == "Malignant":
        pdf.ln(5)
        pdf.set_font("Arial", 'B', 12)
        pdf.cell(200, 10, txt="Suggested Homeopathic Remedies:", ln=True)
        pdf.set_font("Arial", '', 12)
        remedies = [
            "- Thuja Occidentalis",
            "- Sulphur",
            "- Graphites",
            "- Arsenicum Album",
            "- Natrum Muriaticum"
        ]
        for remedy in remedies:
            pdf.cell(200, 10, txt=remedy, ln=True)

    # Footer
    pdf.ln(15)
    pdf.set_font("Arial", 'I', 12)
    pdf.cell(200, 10, txt="This report is generated based on AI analysis and is not a substitute for professional medical advice.", ln=True)
    
    pdf.ln(10)
    pdf.cell(200, 10, txt="Doctor Signature: _________________________", ln=True)

    # Save
    os.makedirs("output_reports", exist_ok=True)
    filename = f"output_reports/report_{name}_{datetime.now().strftime('%Y%m%d%H%M%S')}.pdf"
    pdf.output(filename)
    return filename

def main():
    st.title("Skin Cancer Prediction App ðŸ©º")

    name = st.text_input("Patient Name")
    age = st.number_input("Patient Age", min_value=0)
    address = st.text_area("Address")
    img_file = st.file_uploader("Upload Image", type=["jpg", "jpeg", "png"])

    if st.button("Predict") and img_file and name and age and address:
        result, prob = predict(img_file)
        st.success(f"Prediction: {result} ({prob:.2f})")
        
        pdf_path = create_pdf(name, age, address, result, prob)
        with open(pdf_path, "rb") as f:
            st.download_button("Download PDF Report", f, file_name="Skin_Cancer_Report.pdf")

# This is key:
if __name__ == "__main__":
    main()
